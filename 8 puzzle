def get_neighbors(state):
    neighbors = []
    zero_row, zero_col = [(i, row.index(0)) for i, row in enumerate(state) if 0 in row][0]
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for dr, dc in moves:
        new_row, new_col = zero_row + dr, zero_col + dc
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = [row[:] for row in state]
            new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[zero_row][zero_col]
            neighbors.append([row[:] for row in new_state])
    return neighbors

def dfs(state, path=[]):
    if state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
        return path
    for neighbor in get_neighbors(state):
        if neighbor not in path:
            result = dfs(neighbor, path + [neighbor])
            if result is not None:
                return result
    return None

def print_state(state):
    for row in state:
        print(" ".join(f"{num:2}" for num in row))
    print()


start_state = [[1, 2, 3], [4, 5, 6], [7, 0, 8]]
solution = dfs(start_state)

if solution:
    print("Solution path:")
    for state in solution:
        print_state(state)
else:
    print("No solution found.")
