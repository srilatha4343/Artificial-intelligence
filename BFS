from collections import deque
def bfs(graph, start_node):
    queue = deque([start_node])
    visited = set([start_node])
    bfs_order = []
    while queue:
        current_node = queue.popleft()
        bfs_order.append(current_node)
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    return bfs_order
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F', 'G'],
        'D': ['B'],
        'E': ['B'],
        'F': ['C'],
        'G': ['C']
    }
    bfs_result = bfs(graph, 'A')
    print("BFS Traversal Order:", bfs_result)
