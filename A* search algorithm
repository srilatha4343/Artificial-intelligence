import heapq
def a_star(graph, start, goal, heuristic):
    open_list = []
    heapq.heappush(open_list, (0, start))
    g_costs = {start: 0}
    came_from = {start: None} 
    while open_list:
        current_cost, current_node = heapq.heappop(open_list)
        if current_node == goal:
            return reconstruct_path(came_from, goal)
        for neighbor, move_cost in graph[current_node]:
            tentative_g_cost = g_costs[current_node] + move_cost
            if neighbor not in g_costs or tentative_g_cost < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g_cost
                f_cost = tentative_g_cost + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_cost, neighbor))
                came_from[neighbor] = current_node
    return None
def reconstruct_path(came_from, current_node):
    path = []
    while current_node:
        path.append(current_node)
        current_node = came_from[current_node]
    return path[::-1] 
def heuristic(node, goal):
    x1, y1 = node
    x2, y2 = goal
    return abs(x1 - x2) + abs(y1 - y2)  
graph = {
    (0, 0): [((0, 1), 1), ((1, 0), 1)],
    (0, 1): [((0, 0), 1), ((1, 1), 1), ((0, 2), 1)],
    (0, 2): [((0, 1), 1), ((1, 2), 1)],
    (1, 0): [((0, 0), 1), ((1, 1), 1), ((2, 0), 1)],
    (1, 1): [((1, 0), 1), ((0, 1), 1), ((2, 1), 1), ((1, 2), 1)],
    (1, 2): [((0, 2), 1), ((1, 1), 1), ((2, 2), 1)],
    (2, 0): [((1, 0), 1), ((2, 1), 1)],
    (2, 1): [((2, 0), 1), ((1, 1), 1), ((2, 2), 1)],
    (2, 2): [((2, 1), 1), ((1, 2), 1)]
}
start = (0, 0)
goal = (2, 2)
path = a_star(graph, start, goal, heuristic)
if path:
    print(f"Path found: {path}")
else:
    print("No path found.")
